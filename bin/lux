#!/usr/bin/env escript
%% This is an -*- erlang -*- file.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Copyright 2012-2016 Tail-f Systems AB
%%
%% See the file "LICENSE" for information on usage and redistribution
%% of this file, and for a DISCLAIMER OF ALL WARRANTIES.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-module(lux_main).
-mode(compile).

-define(APPLICATION, lux).
-define(FILES, "--").

-spec(main([string()]) -> no_return()).
main(OrigArgs) ->
    ensure_lux_app_dir(true),
    LuxAppDir = require_app(undefined, ?APPLICATION),
    OpModes = ["--help", "--version", "--markdown",
               "--internal_debug", "--event_trace", "--internal_trace",
               "--make", "--install", "--reltool",
               "--annotate", "--history"],
    Args  = expand_flags(OrigArgs, OpModes),
    Specs = specs(),
    Opts  = getopts(Args, Specs, LuxAppDir),
    %% io:format("Args: ~p\n", [Opts]),
    ExitCode = dispatch(Opts, LuxAppDir, OpModes, Specs, OrigArgs),
    safe_halt(ExitCode).

dispatch(Opts, LuxAppDir, OpModes, Specs, OrigArgs) ->
    case select_op(Opts, OpModes) of
        {Op, Args} ->
            do_dispatch(Op, Opts, LuxAppDir, OpModes, Specs, Args, OrigArgs);
        undefined ->
            run(Opts, OrigArgs)
        end.

do_dispatch(Op, Opts, LuxAppDir, OpModes, Specs, Args, OrigArgs) ->
    case {Op, Args} of
        {"--help", [_]}             -> help(LuxAppDir, Specs);
        {"--version", [_]}          -> version();
        {"--markdown", [_]}         -> markdown();
        {"--internal_debug", [_]}   -> internal_debug(Op, OrigArgs);
        {"--event_trace", [_]}      -> event_trace(Op, LuxAppDir, Opts,
                                                   OpModes, Specs, OrigArgs);
        {"--internal_trace", [_]}   -> internal_trace(Op, LuxAppDir, Opts,
                                                      OpModes, Specs, OrigArgs);
        {"--make", [_]}             -> make(Op, LuxAppDir);
        {"--install", [InstallDir]} -> install(Op, LuxAppDir, InstallDir, Opts);
        {"--reltool", [_]}          -> reltool(Op, LuxAppDir, Opts);
        {"--annotate", [LogFile]}   -> annotate(LogFile, Opts);
        {"--history", [LogDir]}     -> history(LogDir, Opts);
        _                           -> usage(Specs, LuxAppDir)
    end.

expand_flags(Args, OpModes) ->
    case Args of
        [First | _] ->
            case lists:member(First, OpModes) of
                true  -> Args; % Ignore additional flags for aux commands
                false -> do_expand_flags(Args)
            end;
        [] ->
            do_expand_flags(Args)
    end.

do_expand_flags(Args) ->
   env_to_args("LUX_FLAGS") ++ env_to_args("LUX_SYSTEM_FLAGS") ++ Args.

env_to_args(Var) ->
    case os:getenv(Var) of
        false -> [];
        Flags -> string:tokens(Flags, " ")
    end.

select_op(Opts, [Key | Keys]) ->
    case proplists:get_value(Key, Opts) of
        [] ->
            select_op(Opts, Keys);
        Vals ->
            {Key, Vals}
    end;
select_op(_Opts, []) ->
    undefined.

specs() ->
    [
     {"-h",                   ["--help"]},
     {"-r",                   ["--rerun=fail"]},
     {"-c",                   ["--progress=compact"]},
     {"-v",                   ["--progress=verbose"]},
     {"-t",                   ["--progress=silent", "--tap=stdout"]},
     {"-d",                   ["--debug"]},
     {"-D",                   ["--internal_debug"]},
     {"-e",                   ["--event_trace"]},
     {"-T",                   ["--internal_trace"]},
     {?FILES,                 "",          string,                 mandatory},
     {"--help",               false,       boolean,                none},
     {"--version",            false,       boolean,                none},
     {"--markdown",           false,       boolean,                none},
     {"--internal_debug",     false,       boolean,                none},
     {"--event_trace",        false,       boolean,                none},
     {"--internal_trace",     false,       boolean,                none},
     {"--make",               false,       boolean,                none},
     {"--install",            "",          string,                 optional},
     {"--install_app",        undefined,   string,                 mandatory},
     {"--install_profile",    standalone,  {enum, profile},        mandatory},
     {"--reltool",            false,       boolean,                none},
     {"--annotate",           false,       string,                 mandatory},
     {"--history",            false,       string,                 mandatory},
     {"--rerun",              enable,      {enum, prio},           mandatory},
     {"--html",               enable,      {enum, prio},           mandatory},
     {"--debug",              false,       boolean,                none},
     {"--debug_file",         undefined,   string,                 mandatory},
     {"--skip",               undefined,   string,                 mandatory},
     {"--skip_unless",        undefined,   string,                 mandatory},
     {"--skip_skip",          false,       boolean,                none},
     {"--require",            undefined,   string,                 mandatory},
     {"--case_prefix",        undefined,   string,                 mandatory},
     {"--log_dir",            undefined,   string,                 mandatory},
     {"--config_dir",         undefined,   string,                 mandatory},
     {"--config_name",        undefined,   string,                 mandatory},
     {"--suite",              undefined,   string,                 mandatory},
     {"--run",                undefined,   string,                 mandatory},
     {"--extend_run",         false,       boolean,                none},
     {"--revision",           undefined,   string,                 mandatory},
     {"--hostname",           undefined,   string,                 mandatory},
     {"--mode",               execute,     {enum, mode},           mandatory},
     {"--progress",           brief,       {enum, progress},       mandatory},
     {"--multiplier",         1000,        {integer, 0, infinity}, mandatory},
     {"--suite_timeout",      infinity,    {integer, 0, infinity}, mandatory},
     {"--case_timeout",       5*60*1000,   {integer, 0, infinity}, mandatory},
     {"--flush_timeout",      1000,        {integer, 0, infinity}, mandatory},
     {"--poll_timeout",       100,         {integer, 0, infinity}, mandatory},
     {"--timeout",            10*1000,     {integer, 0, infinity}, mandatory},
     {"--cleanup_timeout",    100*1000,    {integer, 0, infinity}, mandatory},
     {"--shell_wrapper",      "",          string,                 optional},
     {"--shell_cmd",          "/bin/sh",   string,                 mandatory},
     {"--shell_args",         ["-i"],      string,                 mandatory},
     {"--shell_prompt_cmd",   "export PS1=SH-PROMPT:",
                                           string,                 mandatory},
     {"--shell_prompt_regexp","^SH-PROMPT:",
                                           string,                 mandatory},
     {"--file_pattern", ".*\.lux" ++ [$$], string,                 mandatory},
     {"--root_dir",           undefined,   string,                 mandatory},
     {"--var",                undefined,   string,                 mandatory},
     {"--tap",                undefined,   string,                 mandatory}
    ].

enum(profile) ->
    [standalone, development, embedded];
enum(mode) ->
    [list, list_dir, doc, validate, execute];
enum(prio) ->
    [enable, success, skip, warning, fail, error, disable];
enum(progress) ->
    [silent, summary, brief, doc, compact, verbose].

enum_usage(Enum) ->
    Atoms = enum(Enum),
    Strings = [atom_to_list(A) || A <- Atoms],
    "enum(" ++ string:join(Strings, "|") ++ ")".

enum_value(Enum, Value) when is_list(Value) ->
    Atoms = enum(Enum),
    Strings = [atom_to_list(A) || A <- Atoms],
    true = lists:member(Value, Strings), % Assert
    list_to_existing_atom(Value).

usage(Specs, LuxAppDir) ->
    do_usage(Specs, LuxAppDir),
    1.

do_usage(Specs, LuxAppDir) ->
    io:format("usage: ~s [OPTION]... [FILE]...\n", [script_base_name()]),
    P = fun(Atom) -> [H | T] = atom_to_list(Atom), [string:to_upper(H) | T] end,
    PrettyType = fun(Type) ->
                         case Type of
                             {enum, Enum}    -> enum_usage(Enum);
                             {T, _Min, _Max} -> P(T);
                             T               -> P(T)
                         end
                 end,
    Pretty = fun(Spec) ->
                     case Spec of
                         {Short, Opts} -> % alias
                             Long = lists:flatten([[O, " "] || O <- Opts]),
                             io:format("\t~s short for ~s\n", [Short, Long]);
                         {Name, _Default, Type, mandatory} ->
                             io:format("\t~s ~s\n", [Name, PrettyType(Type)]);
                         {Name, _Default, Type, optional} ->
                             io:format("\t~s [~s]\n", [Name, PrettyType(Type)]);
                         {Name, _Default, _Type, none} ->
                             io:format("\t~s\n", [Name])
                     end
             end,
    [Pretty(S) || S <- Specs, element(1, S) =/= ?FILES],
    info_doc(LuxAppDir).

info_doc(LuxAppDir) ->
    Url = doc_url(LuxAppDir),
    Version = lux_utils:version(),
    io:format("\nRead the full documentation of Lux ~s"
              " in the browser:\n\n\t~s\n",
              [Version, Url]).

doc_url(AppDir) ->
    UsersGuide = filename:join([AppDir, "lux.html"]),
    "file://" ++ filename:absname(UsersGuide).

help(LuxAppDir, Specs) ->
    do_usage(Specs, LuxAppDir),
    0.

version() ->
    io:format("~s\n", [lux_utils:version()]),
    0.

markdown() ->
    lux_debug:markdown(),
    0.

internal_debug(MainOp, Args) ->
    require_app(MainOp, debugger),
    require_app(MainOp, wx),
    Escript = escript:script_name(),
    {ok, [{shebang, Shebang0} | _Rest]} = escript:extract(Escript, []),
    case Shebang0 of
        default -> Shebang = "/usr/bin/env escript";
        Shebang -> ok
    end,
    FlatArgs = lists:flatten([[" ", A] || A <- Args,
                                          A =/= "-D",
                                          A =/= "--internal_debug"]),
    DebugCmd = Shebang ++ " -d " ++ Escript ++ FlatArgs,
    io:format("~s\n", [DebugCmd]),
    PortOpts = [binary, stream, use_stdio, stderr_to_stdout, eof],
    Port = open_port({spawn, DebugCmd}, PortOpts),
    spawn_link(fun() -> forward_stdin(Port, 1) end),
    forward_stdout(Port).

internal_trace(MainOp, LuxAppDir, Opts, OpModes, Specs, OrigArgs) ->
    require_app(MainOp, runtime_tools),
    AppFile = filename:join([LuxAppDir, "ebin", "lux.app"]),
    Mods =
        case file:consult(AppFile) of
            {ok, [{application, lux, Spec}]} ->
                {_, AppMods} = lists:keyfind(modules, 1, Spec),
                [?MODULE | AppMods];
            {ok, _} ->
                io:format("WARNING: ~s: Bad file format\n", [AppFile]),
                ['_'];
            {error, Reason} ->
                io:format("WARNING: ~s: ~s\n",
                          [AppFile, file:format_error(Reason)]),
                ['_']
        end,
    stop_after(timer:seconds(30)),
    dbg:start(),
    dbg:tracer(),
    dbg:p(self(), [c, p, sos]),
    %% dbg:p(self(), [c, m, p, sos]),
    [dbg:tpl({M, '_', '_'}, [{'_', [], [{return_trace}]}]) || M <- Mods],
    Key = "--internal_trace",
    NewOpts = lists:keyreplace(Key, 1, Opts, {Key, []}),
    dispatch(NewOpts, LuxAppDir, OpModes, Specs, OrigArgs).

event_trace(MainOp, LuxAppDir, Opts, OpModes, Specs, OrigArgs) ->
    require_app(MainOp, runtime_tools),
    require_app(MainOp, et),
    require_app(MainOp, wx),
    EtOpts =
        [
         {title,"LUX"},
         {trace_global,true},
         {trace_pattern,{lux,max}},
         {hide_unknown, true},
         {max_actors,10}
        ],
    case et_viewer:start(EtOpts) of
        {ok, ViewerPid} ->
            ViewerRef = erlang:monitor(process, ViewerPid),
            Key = "--event_trace",
            NewOpts = lists:keyreplace(Key, 1, Opts, {Key, []}),
            dispatch(NewOpts, LuxAppDir, OpModes, Specs, OrigArgs),
            receive
                {'DOWN', ViewerRef, _Type, _Object, shutdown} ->
                    ok;
                {'DOWN', ViewerRef, _Type, _Object, Reason} ->
                    io:format("Event tracer exit: ~p\n", [Reason])
            end,
            0;
        {error, Reason} ->
            io:format("Event tracer error: ~p\n", [Reason]),
            1
    end.

stop_after(Timeout) ->
    spawn(fun() ->
                  receive
                  after Timeout ->
                          dbg:stop_clear(),
                          io:format("\n\nlux watchdog -"
                                    " Tracing interrupted and node"
                                    " killed after ~p seconds\n\n",
                                    [Timeout div 1000]),
                          safe_halt(11)
                  end
          end).

forward_stdin(Port, N) ->
    case io:get_line("") of
        eof when N =:= 1 ->
            %% Closed already at startup
            exit(normal);
        eof ->
            io:format("\nEOF: stdin closed\n", []),
            exit(normal);
        {error,terminated} ->
            exit(normal);
        Data ->
            %% forward to port
            true = port_command(Port, Data),
            forward_stdin(Port, N+2)
    end.

forward_stdout(Port) ->
    receive
        {Port, {data, Data}} ->
            io:format("~s", [Data]),
            forward_stdout(Port);
        {Port, eof} ->
            port_close(Port),
            0;
        Unexpected ->
            io:format("Got something unexpected from port: ~p\n",
                      [Unexpected]),
            forward_stdout(Port)
    end.

make(MainOp, LuxAppDir) ->
    io:format("Making ~p...\n", [?APPLICATION]),
    require_app(MainOp, tools),
    SrcDir = filename:join([LuxAppDir, "src"]),
    EbinDir = filename:join([LuxAppDir, "ebin"]),
    {ok, SrcDir} = {file:set_cwd(SrcDir), SrcDir},
    {up_to_date, EbinDir} = {make:all([debug_info,{outdir, EbinDir}]), EbinDir},
    AppStr = atom_to_list(?APPLICATION),
    SrcAppFile = filename:join([SrcDir, AppStr ++ ".app.src"]),
    DestAppFile = filename:join([EbinDir, AppStr ++ ".app"]),
    io:format("Copy: ~s\n", [filename:basename(DestAppFile)]),
    {{ok, _}, SrcAppFile, DestAppFile} =
        {file:copy(SrcAppFile, DestAppFile), SrcAppFile, DestAppFile},
    0.

install(MainOp, LuxAppDir, InstallDir, Opts) ->
    InstallProf = reltool_profile(Opts),
    io:format("Installing ~p as a ~p system... ~s\n",
              [?APPLICATION, InstallProf, InstallDir]),
    {RootDir, ReltoolOpts} = reltool_opts(MainOp, LuxAppDir, Opts),
    case reltool:start_server(ReltoolOpts) of
        {ok, ServerPid} ->
            case reltool:get_status(ServerPid) of
                {ok, Warnings} ->
                    [io:format("WARNING: ~s\n", [W]) || W <- Warnings],
                    do_install(ServerPid, InstallDir, RootDir);
                {error, StatusReasonStr} ->
                    io:format("ERROR: ~s\n", [StatusReasonStr]),
                    1
            end;
        {error, StartReasonStr} ->
            io:format("ERROR: ~s\n", [StartReasonStr]),
            1
    end.

do_install(ServerPid, InstallDir, RootDir) ->
    GetSpecRes = reltool:get_target_spec(ServerPid),
    _StopRes = reltool:stop(ServerPid),
    case GetSpecRes of
        {ok, Spec} ->
            case InstallDir of
                "" ->
                    io:format("Spec: ~p.\n", [Spec]),
                    timer:sleep(timer:seconds(1)),
                    0;
                _ ->
                    case reltool:eval_target_spec(Spec,
                                                  RootDir,
                                                  InstallDir) of
                        ok ->
                            0;
                        {error, EvalReasonStr} ->
                            io:format("ERROR: ~s\n", [EvalReasonStr]),
                            1
                    end
            end;
        {error, SpecReasonStr} ->
            io:format("ERROR: ~s\n", [SpecReasonStr]),
            1
    end.

reltool(MainOp, LuxAppDir, Opts) ->
    io:format("Starting reltool...\n", []),
    process_flag(trap_exit, true),
    {_RootDir, ReltoolOpts} = reltool_opts(MainOp, LuxAppDir, Opts),
    case reltool:start(ReltoolOpts) of
        {ok, Pid} ->
            link(Pid),
            receive
                {'EXIT', Pid, Reason} ->
                    io:format("reltool exit: ~p\n", [Reason])
            end,
            0;
        {error, ReasonStr} ->
            io:format("ERROR: ~s\n", [ReasonStr]),
            1
    end.

reltool_opts(MainOp, LuxAppDir, Opts) ->
    require_app(MainOp, reltool),
    {IsCross, RootDir} = root_dir(Opts),
    ThisEscript = escript:script_name(),
    %% Include some extra files beside the default files
    AppFilters =
        [{incl_app_filters, ["^LICENSE", "^lux.html",
                             "ebin", "^priv", "^examples.*", "^emacs.*"]},
         {excl_archive_filters, ["^LICENSE", "^lux.html",
                                 "^priv", "^examples.*", "^emacs.*"]},
         {excl_app_filters, [".*empty$"]}],
    HasAppLibDir = app_has_feature(MainOp, reltool, "0.6", mandatory),
    LuxApps =
        case HasAppLibDir of
            true ->
                %% New reltool can handle lib_dir in app
                [{app, ?APPLICATION, [{lib_dir, LuxAppDir} | AppFilters]}];
            false ->
                %% Old reltool
                [{app, ?APPLICATION, AppFilters},
                 {lib_dirs, [filename:dirname(LuxAppDir)]}]
        end,
    HasRelaxedExclusion = app_has_feature(MainOp, reltool, "0.6.4", mandatory),
    {AppCondsWx, AppCondsCross} =
        case {IsCross, HasRelaxedExclusion} of
            {true, false} ->
                {[],
                 []};
            _ ->
                %% New reltool can handle excluded non-existent apps
                {[{wx, exclude}],
                 [{hipe, exclude}, {reltool, exclude}]}
        end,
    AppCondsCommon = [{erts, exclude}, {crypto, exclude}, {tools, exclude}],
    AppCondsMain =
        case MainOp of
            "--install" ->
                AppCondsWx ++ [{runtime_tools, exclude}];
            "--reltool" ->
                AppCondsWx
        end,
    AppConds = AppCondsCommon ++ AppCondsCross ++ AppCondsMain,
    {_, InstallApps} = lists:keyfind("--install_app", 1, Opts),
    InstallApps2 = [{list_to_atom(A), include} || A <- InstallApps],
    AppConds2 = [{A, C} || {A, C} <- AppConds,
                           not lists:keymember(A, 1, InstallApps2)],
    AppConds3 = AppConds2 ++ InstallApps2,
    ExtraApps = filter_apps(MainOp, AppConds3, IsCross, HasRelaxedExclusion),
    Common =
        [{root_dir, RootDir},
         {debug_info, strip},
         {escript, ThisEscript, [{incl_cond, include}]}],
    Profile =
        case reltool_profile(Opts) of
            standalone ->
                [{profile, standalone},
                 {excl_sys_filters,
                  {add,
                   ["^bin/(epmd|start.boot)(|\\.exe)" ++ [$$],
                    "^erts.*/bin/(epmd|heart|ct_run)(|\\.exe)"  ++ [$$]]}}];
            InstallProf ->
                [{profile, InstallProf}]
        end,
    {RootDir, [{sys, Common ++ LuxApps ++ ExtraApps ++ Profile}]}.

reltool_profile(Opts) ->
    case lists:keyfind("--install_profile", 1, Opts) of
        {_, []}      -> standalone;
        {_, Profile} -> lists:last(Profile)
    end.

app_has_feature(MainOp, AppName, LowestVersion, Require) ->
    LoadedApps = application:loaded_applications(),
    case lists:keyfind(AppName, 1, LoadedApps) of
        {_Name, _Slogan, Version} when Version >= LowestVersion ->
            true;
        {_Name, _Slogan, _Version} ->
            false;
        false when Require =:= optional ->
            false;
        false when Require =:= mandatory ->
            require_app(MainOp, AppName), % Halt upon failure
            app_has_feature(MainOp, AppName, LowestVersion, Require)
    end.

filter_apps(_MainOp, AppConds, _IsCross, true) ->
    [{app, AppName, [{incl_cond,InclCond}]} || {AppName,InclCond} <- AppConds];
filter_apps(MainOp, AppConds, _IsCross, false) ->
    lists:zf(fun({AppName, InclCond}) ->
                     case application:load(AppName) of
                         ok ->
                             {true, {app, AppName, [{incl_cond, InclCond}]}};
                         {error, {already_loaded,AppName}}->
                             {true, {app, AppName, [{incl_cond, InclCond}]}};
                         {error, _} when InclCond =:= include ->
                             missing_app(MainOp, AppName);
                         {error, _} ->
                             false
                     end
             end,
             AppConds).

root_dir(Opts) ->
    case lists:keyfind("--root_dir", 1, Opts) of
        {_, []}        -> {false, code:root_dir()};
        {_, [RootDir]} -> {true, RootDir}
    end.

annotate(LogFile0, Opts) ->
    {_Files, Opts2} = translate_opts(Opts),
    LogFile = filename:absname(LogFile0),
    io:format("Annotating logs ~s...", [LogFile]),
    case lux:annotate_log(LogFile, Opts2) of
        ok ->
            io:format("...ok\n", []),
            io:format("\nfile://~s\n", [LogFile ++ ".html"]),
            0;
        {error, File, ReasonStr} ->
            io:format("...ERROR\n\t~p: ~s\n", [File, ReasonStr]),
            1
    end.

history(LogDir0, Opts) ->
    {_Files, Opts2} = translate_opts(Opts),
    LogDir = filename:absname(LogDir0),
    io:format("Assembling history of logs in ~s...", [LogDir]),
    HtmlFile = filename:join([LogDir, "lux_history.html"]),
    case lux:history(LogDir, HtmlFile, Opts2) of
        ok ->
            io:format("...ok\n", []),
            io:format("\nfile://~s\n", [HtmlFile]),
            0;
        {error, File, ReasonStr} ->
            io:format("...ERROR\n\t~p: ~s\n", [File, ReasonStr]),
            1
    end.

run(Opts, OrigArgs) ->
    {Files, Opts2} = translate_opts(Opts),
    ThisEscript = escript:script_name(),
    case lux:run(Files, Opts2, [ThisEscript | OrigArgs]) of
        {ok, Summary, _SummaryLog, _Results} ->
            ok;
        {error, File, ReasonBin} ->
            io:format("\n\nFATAL ERROR: ~s:\n\t~s\n", [File, ReasonBin]),
            Summary = error
    end,
    exit_code(Summary).

exit_code(Summary) ->
    case Summary of
        success -> 0;
        skip    -> 0;
        warning -> 0;
        fail    -> 1;
        error   -> 1
    end.

translate_opts([
     {?FILES,                 Files},
     {"--help",               _Help},
     {"--version",            _Version},
     {"--markdown",           _Markdown},
     {"--internal_debug",     _InternalDebug},
     {"--event_trace",        _EventTrace},
     {"--internal_trace",     _InternalTrace},
     {"--make",               _Make},
     {"--install",            _InstallDir},
     {"--install_app",        _InstallApp},
     {"--install_profile",    _InstallProfile},
     {"--reltool",            _Reltool},
     {"--annotate",           _LogFile},
     {"--history",            _LogDir},
     {"--rerun",              ReRun},
     {"--html",               Html},
     {"--debug",              Debug},
     {"--debug_file",         DebugFile},
     {"--skip",               Skip},
     {"--skip_unless",        SkipUnless},
     {"--skip_skip",          SkipSkip},
     {"--require",            Require},
     {"--case_prefix",        CasePrefix},
     {"--log_dir",            LogDir},
     {"--config_dir",         ConfigDir},
     {"--config_name",        ConfigName},
     {"--suite",              Suite},
     {"--run",                Run},
     {"--extend_run",         ExtendRun},
     {"--revision",           Revision},
     {"--hostname",           Hostname},
     {"--mode",               Mode},
     {"--progress",           Progress},
     {"--multiplier",         Multiplier},
     {"--suite_timeout",      SuiteTimeout},
     {"--case_timeout",       CaseTimeout},
     {"--flush_timeout",      FlushTimeout},
     {"--poll_timeout",       PollTimeout},
     {"--timeout",            ExpectTimeout},
     {"--cleanup_timeout",    CleanupTimeout},
     {"--shell_wrapper",      ShellWrapper},
     {"--shell_cmd",          ShellCmd},
     {"--shell_args",         ShellArgs},
     {"--shell_prompt_cmd",   ShellPromptCmd},
     {"--shell_prompt_regexp",ShellPromptRegexp},
     {"--file_pattern",       FilePattern},
     {"--root_dir",           _RootDir},
     {"--var",                Var},
     {"--tap",                Tap}
    ]) ->
    Opts =
        [
         {debug,              Debug},
         {debug_file,         DebugFile},
         {progress,           Progress},
         {rerun,              ReRun},
         {html,               Html},
         {case_timeout,       CaseTimeout},
         {flush_timeout,      FlushTimeout},
         {poll_timeout,       PollTimeout},
         {timeout,            ExpectTimeout},
         {cleanup_timeout,    CleanupTimeout},
         {shell_wrapper,      ShellWrapper},
         {shell_cmd,          ShellCmd},
         {shell_args,         ShellArgs},
         {shell_prompt_cmd,   ShellPromptCmd},
         {shell_prompt_regexp,ShellPromptRegexp},
         {multiplier,         Multiplier},
         {suite_timeout,      SuiteTimeout},
         {log_dir,            LogDir},
         {skip,               Skip},
         {skip_unless,        SkipUnless},
         {skip_skip,          SkipSkip},
         {require,            Require},
         {case_prefix,        CasePrefix},
         {var,                Var},
         {mode,               Mode},
         {config_dir,         ConfigDir},
         {config_name,        ConfigName},
         {suite,              Suite},
         {run,                Run},
         {extend_run,         ExtendRun},
         {revision,           Revision},
         {hostname,           Hostname},
         {file_pattern,       FilePattern},
         {tap,                Tap}
        ],
    {Files, lux_suite:args_to_opts(Opts, suite_style, [])}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Generic option handling
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-type opt()      :: string() .
-type name()     :: string().
-type default()  :: term().
-type type()     :: string | binary |
                    atom | existing_atom |
                    integer | {integer, min(), max()} |
                    float | {float, min(), max()} |
                    boolean | validate().
-type min()      :: integer().
-type max()      :: integer() | infinity.
-type validate() :: fun((opt() | default()) -> val()).
-type presence() :: none | optional | mandatory.
-type spec()     :: {name(), [opt()]} | % alias
                    {name(), default(), type(), presence()}.
-type val()      :: term().
-spec getopts([opt()], [spec()], string()) -> [[val()]].

%% Parse options and validate their values.
%% All options in the specs are returned and they keep that order.
getopts(Args, Specs, LuxAppDir) ->
    try
        Opts = do_getopts(Args, Specs, []),
        expand_opts(Opts, Specs)
    catch
        throw:{badarg, Bad} ->
            io:format("~s: ~p is an illegal argument.\n\n",
                      [script_base_name(), Bad]),
            safe_halt(usage(Specs, LuxAppDir));
        throw:{badarg, Bad, Type} ->
            io:format("~s: ~p is an illegal argument. ~p expected.\n\n",
                      [script_base_name(), Bad, Type]),
            safe_halt(usage(Specs, LuxAppDir));
        throw:{badarg, Name, Bad, Type} ->
            io:format("~s: ~p is an illegal value of argument ~s."
                      " ~p expected.\n\n",
                      [script_base_name(), Bad, Name, Type]),
            safe_halt(usage(Specs, LuxAppDir))
    end.

do_getopts([], _Specs, Acc) ->
    lists:reverse(Acc);
do_getopts(Args, Specs, Acc) ->
    {MoreArgs, Name, Val, Type, Presence} = getopt(Args, Specs),
    Val2 = validate(Name, Val, Type, Presence),
    do_getopts(MoreArgs, Specs, [{Name, Val2} | Acc]).

getopt([?FILES | Args], _Specs) ->
    {[], ?FILES, Args, string, optional};
getopt([Arg | Args], Specs) when hd(Arg) =:= $- ->
    {Val, Spec} = find_spec(Arg, Specs),
    case Spec of
        {_Short, Long} ->
            getopt(Long ++ Args, Specs);
        {Name, Default, Type, Presence} ->
            case {Presence, Val, Args} of
                {none, undefined, _} when Type =:= boolean ->
                    %% boolean - no value, return opposite of default
                    {Args, Name, not Default, Type, Presence};
                {none, "true", _} when Type =:= boolean ->
                    %% boolean - got name=true
                    {Args, Name, true, Type, Presence};
                {none, "false", _} when Type =:= boolean ->
                    %% boolean - got name=false
                    {Args, Name, false, Type, Presence};
                {none, _, _} ->
                    %% boolean - got -name=val
                    badarg(Arg, Type);
                {mandatory, undefined, []} ->
                    %% val required - no more options
                    badarg(Arg, Type);
                {mandatory, undefined, ["-" ++ _NextArg | _NextArgs]} ->
                    %% val required - next option is not a val
                    badarg(Arg, Type);
                {mandatory, undefined, [NextVal | NextArgs]} ->
                    %% val required - return separate val
                    {NextArgs, Name, NextVal, Type, Presence};
                {mandatory, _, _} ->
                    %% val required - got name=val
                    {Args, Name, Val, Type, Presence};
                {optional, undefined, []} ->
                    %% optional val - return default val
                    {Args, Name, Default, Type, Presence};
                {optional, undefined, ["-" ++ _NextArg | _NextArgs]} ->
                    %% optional val - return default val
                    {Args, Name, Default, Type, Presence};
                {optional, undefined, [NextVal | NextArgs]} ->
                    %% optional val - got name=val
                    {NextArgs, Name, NextVal, Type, Presence};
                {optional, _, _} ->
                    %% optional val - return default val
                    {Args, Name, Val, Type, Presence}
            end
    end;
getopt(Args, _Specs) ->
    {[], ?FILES, Args, string, optional}.

expand_opts(Opts, Specs) ->
    Fun = fun({_Short, _Long}, Acc) -> % alias
                  Acc;
             ({Name, _Default, _Type, _Presence}, Acc) ->
                  Vals = proplists:get_all_values(Name, Opts),
                  Vals2 =
                      if
                          Name =:= ?FILES ->
                              lists:append(Vals);
                          true ->
                              Vals
                      end,
                     [{Name, Vals2} | Acc]
          end,
    lists:reverse(lists:foldl(Fun, [], Specs)).

validate(Name, Val, Type, Presence) ->
    try
        case Type of
            string when is_list(Val) ->
                Val;
            binary ->
                list_to_binary(Val);
            atom ->
                list_to_atom(Val);
            existing_atom ->
                list_to_existing_atom(Val);
            integer ->
                list_to_integer(Val);
            {integer, _Min, infinity} when Val =:= "infinity" ->
                infinity;
            {integer, Min, infinity} when Val >= Min ->
                list_to_integer(Val);
            {integer, Min, Max} when Val >= Min, Val =< Max ->
                list_to_integer(Val);
            float ->
                list_to_float(Val);
            {float, _Min, infinity} when Val =:= "infinity" ->
                infinity;
            {float, Min, infinity} when Val >= Min ->
                list_to_float(Val);
            {float, Min, Max} when Val >= Min, Val =< Max ->
                list_to_float(Val);
            boolean when Val =:= true; Val =:= "true" ->
                true;
            boolean when Val =:= false; Val =:= "false" ->
                false;
            {enum, Enum} ->
                enum_value(Enum, Val);
            _ when Val =:= undefined, Presence =/= mandatory ->
                Val
        end
    catch
        _:_ ->
            badarg(Name, Val, Type)
    end.

find_spec(Opt, Specs) ->
    {Name, Val} =
        case lists:prefix("--", Opt) of
            true ->
                %% --name=val
                Eq = $=,
                case lists:splitwith(fun(Char) -> Char =/= Eq end, Opt) of
                    {N, [Eq | V]} -> {N, V};
                    {N, []}       -> {N, undefined}
                end;
            false ->
                {Opt, undefined}
        end,
    %% io:format("Option ~p: ~p -> ~p\n~p\n", [Opt, Name, Val, Specs]),
    case lists:keyfind(Name, 1, Specs) of
        false -> badarg(Opt);
        Spec  -> {Val, Spec}
    end.

badarg(Val) ->
    do_throw({badarg, Val}).

badarg(Val, {enum, Enum}) ->
    do_throw({badarg, Val, enum_usage(Enum)});
badarg(Val, Type) ->
    do_throw({badarg, Val, Type}).

badarg(Name, Val, {enum, Enum}) ->
    do_throw({badarg, Name, Val, enum_usage(Enum)});
badarg(Name, Val, Type) ->
    do_throw({badarg, Name, Val, Type}).

do_throw(Reason) ->
    throw(Reason).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Generic application handling
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

fatal_error(RetCode, Format, Args) ->
    ThisEscript = escript:script_name(),
    io:format("~s: " ++ Format, [ThisEscript  | Args]),
    safe_halt(RetCode).

safe_halt(RetCode) ->
    Ports = erlang:ports(),
    CloseStderr = fun(P) -> safe_port_close(P, name, "2/2", 300) end,
    lists:foreach(CloseStderr, Ports),
    error_logger:tty(false),
    User = whereis(user),
    CloseStdout = fun(P) -> safe_port_close(P, connected, User, 0) end,
    lists:foreach(CloseStdout, Ports),
    if RetCode =:= 0 -> ok; true -> timer:sleep(500) end,
    try
        erlang:halt(RetCode, [{flush,false}]) % Introduced in R16
    catch
        _:_ ->
            erlang:halt(RetCode) % Backwards compat
    end.

safe_port_close(Port, Item, Val, Timeout) ->
    case erlang:port_info(Port, Item) of
        {Item, Val} ->
            erlang:port_connect(Port, self()),
            Port ! {self(), close},
            receive
                {Port, closed} -> ok
            after Timeout ->
                    ok
            end;
        _ ->
            ok
    end.

require_app(MainOp, AppName) ->
    case code:lib_dir(AppName) of
        {error, _Reason} ->
            missing_app(MainOp, AppName);
        AppDir ->
            case application:load(AppName) of
                ok ->
                    AppDir;
                {error, {already_loaded,AppName}}->
                    AppDir;
                {error, _} ->
                    missing_app(MainOp, AppName)
            end
    end.

missing_app(undefined, AppName) ->
    fatal_error(4, "The application '~p' is missing.\n", [AppName]);
missing_app(MainOp, AppName) ->
    fatal_error(4,
                "The application '~p' is required"
                " for the option ~p.\n",
                [AppName, MainOp]).

ensure_lux_app_dir(Retry) ->
    AppName = ?APPLICATION,
    case code:lib_dir(AppName, ebin) of
        {error, _Reason} when Retry =:= true ->
            %% Add application ebin to the code path and see if it works
            ThisEscript = resolve_path(escript:script_name()),
            AppDir = filename:dirname(filename:dirname(ThisEscript)),
            EbinDir = filename:join([AppDir, "ebin"]),
            %% io:format("~s: Add directory ~p to code path\n",
            %%           [AppName, EbinDir]),
            case code:add_patha(EbinDir) of
                true ->
                    ok;
                {error, AddReason} ->
                    io:format("ADD PATH FAILED: ~s ~p\n", [EbinDir, AddReason])
            end,
            ensure_lux_app_dir(false);
        {error, Reason} ->
            io:format("ROOT DIR: ~p\n", [code:root_dir()]),
            io:format("CODE PATH: ~p\n", [code:get_path()]),
            fatal_error(2, "The application '~p' is required to run: ~p\n",
                        [AppName, Reason]);
        EbinDir ->
            filename:dirname(EbinDir)
    end.

script_base_name() ->
    filename:basename(escript:script_name()).

resolve_path(Path0) ->
    Path = normalize_path(Path0),
    do_resolve_path(filename:split(Path), []).

do_resolve_path([H | T], ResolvedPath) ->
    ResolvedPath2 = case ResolvedPath of
                        [] -> filename:absname(H);
                        _  -> filename:join([ResolvedPath, H])
                    end,
    case file:read_link(ResolvedPath2) of
        {error, _} -> % Normal file
            do_resolve_path(T, ResolvedPath2);
        {ok, Link} -> % Symbolic Link
            ResolvedPath3 =
                filename:absname(filename:join([ResolvedPath, Link])),
            resolve_path(filename:join([ResolvedPath3] ++ T))
    end;
do_resolve_path([], ResolvedPath) ->
    ResolvedPath.

normalize_path(File) when is_binary(File) ->
    list_to_binary(normalize_path(binary_to_list(File)));
normalize_path(File) ->
    do_normalize_path(filename:split(filename:absname(File)), []).

do_normalize_path([H|T], Acc) ->
    Acc2 =
        case H of
            "."                  -> Acc;
            ".." when Acc =:= [] -> Acc;
            ".."                 -> tl(Acc);
            _                    -> [H|Acc]
        end,
    do_normalize_path(T, Acc2);
do_normalize_path([], Acc) ->
    filename:join(lists:reverse(Acc)).

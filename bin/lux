#!/usr/bin/env escript
%% This is an -*- erlang -*- file.
%%! -sasl sasl_error_logger false

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Copyright 2012-2023 Tail-f Systems AB
%%
%% See the file "LICENSE" for information on usage and redistribution
%% of this file, and for a DISCLAIMER OF ALL WARRANTIES.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

-module(lux_escript).
-mode(compile).
-compile(warnings_as_errors).

-define(APPLICATION, lux).
-define(FILES, "--").

-ifdef(OTP_RELEASE).
    -define(stacktrace(),
            fun() -> try throw(1) catch _:_:StAcK -> StAcK end end()).
    -define(CATCH_STACKTRACE(Class, Reason, Stacktrace),
            Class:Reason:Stacktrace ->
           ).
-else.
    -define(stacktrace(),
            try throw(1) catch _:_ -> erlang:get_stacktrace() end).
    -define(CATCH_STACKTRACE(Class, Reason, Stacktrace),
            Class:Reason ->
                Stacktrace = erlang:get_stacktrace(),
           ).
-endif.

-spec(main([string()]) -> no_return()).
main(OrigArgs) ->
    steal_signals(),
    ExitCode =
        try
            case OrigArgs of
                ["--help=" ++ HelpMode | _] ->
                    help(OrigArgs, HelpMode);
                ["--help", HelpMode] ->
                    help(OrigArgs, HelpMode);
                ["--make" = Op] ->
                    make(Op);
                _ ->
                    _LuxAppDir = ensure_lux_app_dir(true),
                    lux_main:unsafe_main(OrigArgs)
            end
        catch
            throw:{fatal_error, RetCode, Format, Args} ->
                fatal_error(RetCode, Format, Args);
            throw:{safe_halt, RetCode} ->
                safe_halt(RetCode);
            ?CATCH_STACKTRACE(Class, Reason, EST)
                io:format("\n\nFATAL ERROR: ~p:~p\n\t~p\n",
                          [Class, Reason, EST]),
                2
        end,
    safe_halt(ExitCode).

make(MainOp) ->
    io:format("Making ~p...\n", [?APPLICATION]),
    require_app(MainOp, tools),
    {ok, LuxAppDir} = file:get_cwd(),
    SrcDir = filename:join([LuxAppDir, "src"]),
    EbinDir = filename:join([LuxAppDir, "ebin"]),
    {ok, SrcDir} = {file:set_cwd(SrcDir), SrcDir},
    {up_to_date, EbinDir} = {make:all([debug_info,{outdir, EbinDir}]), EbinDir},
    AppStr = atom_to_list(?APPLICATION),
    SrcAppFile = filename:join([SrcDir, AppStr ++ ".app.src"]),
    DestAppFile = filename:join([EbinDir, AppStr ++ ".app"]),
    io:format("Copy: ~s\n", [filename:basename(DestAppFile)]),
    {{ok, _}, SrcAppFile, DestAppFile} =
        {file:copy(SrcAppFile, DestAppFile), SrcAppFile, DestAppFile},
    ok = file:set_cwd(LuxAppDir),
    c_compile("gcc -o priv/bin/runpty -g -O2 -Wall c_src/runpty.c").

c_compile(Cmd) ->
    io:format("Compile: ~s\n", [Cmd]),
    {Output, Status} = cmd(Cmd),
    io:format("~s\n", [Output]),
    case Status of
        0 -> 0;
        _ -> 1
    end.

cmd(Cmd) ->
    Output = os:cmd(Cmd++"; echo $?"),
    Tokens = string:tokens(Output, "\n"),
    [CmdStatus | Rest] = lists:reverse(Tokens),
    {lists:reverse(Rest), CmdStatus}.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Generic application handling
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

help(OrigArgs, HelpMode) ->
    case HelpMode of
        "info" ->
            display_app_info();
        "app_dir" ->
            display_app_dir();
        _Other ->
            lux_main:unsafe_main(OrigArgs)
    end.

display_app_info() ->
    {ok, Cwd} = file:get_cwd(),
    ThisEscript = escript:script_name(),
    AppDir = app_dir(),
    application:load(?APPLICATION),
    io:format("CWD         : ~s\n", [Cwd]),
    io:format("ESCRIPT     : ~s\n", [ThisEscript]),
    io:format("VERSION     : ~s\n", [version_str()]),
    io:format("APP DIR     : ~s\n", [AppDir]),
    io:format("ROOT DIR    : ~s\n", [code:root_dir()]),
    io:format("CODE PATH   : ~p\n", [code:get_path()]),
    1.

version_str() ->
    try
        lux_utils:version()
    catch
        error:undef ->
            "unknown"
    end.

display_app_dir() ->
    LuxAppDir = ensure_lux_app_dir(true),
    io:format("~s\n", [LuxAppDir]),
    1.

app_dir() ->
    ensure_lux_app_dir(true, false).
%%
%%
%%    case code:lib_dir(?APPLICATION) of
%%        {error, _} -> "unknown";
%%        AppDir     -> AppDir
%%    end.

ensure_lux_app_dir(Retry) ->
    ensure_lux_app_dir(Retry, true).

ensure_lux_app_dir(Retry, Mandatory) ->
    AppName = ?APPLICATION,
    case code:lib_dir(AppName) of
        {error, _Reason} when Retry =:= true ->
            %% Add application ebin to the code path and see if it works
            ThisEscript = resolve_path(escript:script_name()),
            TopDir = filename:dirname(filename:dirname(ThisEscript)),
            case filename:extension(ThisEscript) of
                ".escript" ->
                    %% Standalone installation
                    Wildcard = filename:join([TopDir, "lib", "lux*"]),
                    case lists:sort(filelib:wildcard(Wildcard)) of
                        [] ->
                            AppDir = TopDir;
                        [AppDir | _] ->
                            ok
                    end;
                _ ->
                    %% Development
                    AppDir = TopDir
            end,
            BaseDir = filename:basename(AppDir),
            case lists:prefix("lux-", BaseDir) of
                true ->
                    ok;
                false when BaseDir =:= "lux" ->
                    ok;
                false when Mandatory ->
                    fatal_error(2,
                                "Application directory not named lux: ~p\n",
                                [AppDir]);
                false ->
                    ok
            end,
            EbinDir = filename:join([AppDir, "ebin"]),
            %% io:format("~s: Add directory ~p to code path\n",
            %%           [AppName, EbinDir]),
            case code:add_patha(EbinDir) of
                true ->
                    ok;
                {error, AddReason} ->
                    io:format("ADD LUX APP DIR TO LOAD PATH FAILED: ~s: ~p\n",
                              [EbinDir, AddReason])
            end,
            ensure_lux_app_dir(false);
        {error, bad_name} when Mandatory ->
            fatal_error(2, "The mandatory application '~p' is missing\n",
                        [AppName]);
        {error, Reason} when Mandatory ->
            fatal_error(2, "The mandatory application '~p' is missing: ~p\n",
                        [AppName, Reason]);
        {error, _Reason} ->
            "unknown";
        AppDir ->
            EbinDir = filename:join([AppDir, "ebin"]),
            filename:dirname(EbinDir)
    end.

fatal_error(RetCode, Format, Args) ->
    io:format("\nFATAL ERROR : " ++ Format, Args),
    display_app_info(),
    safe_halt(RetCode).

safe_halt(RetCode) ->
    error_logger:tty(false),

    Ports = erlang:ports(),
    Timeout = timer:seconds(10),
    CloseStderr =
        fun(P, RC) -> safe_port_close(P, name, "2/2", RC, Timeout) end,
    TmpRetCode = lists:foldl(CloseStderr, RetCode, Ports),

    User = whereis(user),
    CloseStdout =
        fun(P, RC) -> safe_port_close(P, connected, User, RC, Timeout) end,
    SafeRetCode = lists:foldl(CloseStdout, TmpRetCode, Ports),

    if SafeRetCode =:= 0 -> ok; true -> timer:sleep(500) end,

    try
        erlang:halt(SafeRetCode, [{flush,false}]) % Introduced in OTP R16
    catch
        error:badarg ->
            erlang:halt(SafeRetCode) % May hang in some older OTP releases...
    end.

safe_port_close(Port, Item, Val, RetCode, Timeout) ->
    case erlang:port_info(Port, Item) of
        {Item, Val} ->
            erlang:port_connect(Port, self()),
            Port ! {self(), close},
            receive
                {Port, closed} ->
                    RetCode
            after Timeout ->
                    5
            end;
        _ ->
            RetCode
    end.

resolve_path(Path0) ->
    Path = normalize_path(Path0),
    do_resolve_path(filename:split(Path), []).

do_resolve_path([H | T], ResolvedPath) ->
    ResolvedPath2 = case ResolvedPath of
                        [] -> filename:absname(H);
                        _  -> filename:join([ResolvedPath, H])
                    end,
    case file:read_link(ResolvedPath2) of
        {error, _} -> % Normal file
            do_resolve_path(T, ResolvedPath2);
        {ok, Link} -> % Symbolic Link
            ResolvedPath3 =
                filename:absname(filename:join([ResolvedPath, Link])),
            resolve_path(filename:join([ResolvedPath3] ++ T))
    end;
do_resolve_path([], ResolvedPath) ->
    ResolvedPath.

normalize_path(File) when is_binary(File) ->
    list_to_binary(normalize_path(binary_to_list(File)));
normalize_path(File) ->
    do_normalize_path(filename:split(filename:absname(File)), []).

do_normalize_path([H | T], Acc) ->
    Acc2 =
        case H of
            "."                  -> Acc;
            ".." when Acc =:= [] -> Acc;
            ".."                 -> tl(Acc);
            _                    -> [H | Acc]
        end,
    do_normalize_path(T, Acc2);
do_normalize_path([], Acc) ->
    filename:join(lists:reverse(Acc)).

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Signal handling
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

steal_signals() ->
    case erlang:function_exported(os, set_signal, 2) of
        true  -> do_steal_signals();
        false -> false % Pre OTP 20
    end.

do_steal_signals() ->
    Pid = spawn_link(fun echo_signals/0),
    catch erlang:unregister(erl_signal_server),
    true = erlang:register(erl_signal_server, Pid),
                                    % io:format("ospid=~s\n", [os:getpid()]),
    os:set_signal(sigusr1, handle), % io:format("sigusr1=crashdump\n", []),
    os:set_signal(sigusr2, handle), % io:format("sigusr2=procinfo\n", []),
    true.

echo_signals() ->
    receive
        {notify, Sig} ->
            io:format("\nGOT SIGNAL ~p\n", [Sig]),
            case Sig of
                sigusr1 ->
                    erlang:halt("\nHalting...\n");
                sigusr2 ->
                    Items = [registered_name, current_stacktrace, messages],
                    ProcInfo = [[{P, erlang:process_info(P, Items)}
                                 || P <- processes()]],
                    erlang:display({procinfo, ProcInfo});
                _ ->
                    ignore
            end,
            echo_signals()
    end.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Duplicate code. Copied from lux_main.
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

require_app(MainOp, AppName) ->
    case code:lib_dir(AppName) of
        {error, Reason} ->
            missing_app(MainOp, AppName, Reason);
        AppDir ->
            case application:load(AppName) of
                ok ->
                    AppDir;
                {error, {already_loaded,AppName}}->
                    AppDir;
                {error, Reason} ->
                    missing_app(MainOp, AppName, Reason)
            end
    end.

missing_app(undefined, AppName, Reason) ->
    fatal_error(4, "The application '~p' is missing. XXX ~p\n",
                [AppName, Reason]);
missing_app(MainOp, AppName, Reason) ->
    fatal_error(4,
                "The application '~p' is required for the ~p option. ~p\n",
                [AppName, MainOp, Reason]).
